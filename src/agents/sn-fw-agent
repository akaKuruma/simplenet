#!/usr/bin/python

# Copyright 2012 Locaweb.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez (ncode), Locaweb.
# @author: Luiz Ozaki, Locaweb.

import getopt, sys

from supay import Daemon
from datetime import datetime

import hashlib
import os
import sys
import json
import fcntl
import ConfigParser

from ipaddr import IPv4Network, IPv4Address, IPv6Network, IPv6Address, IPNetwork, IPAddress

from lockfile import FileLock, LockTimeout

from kombu import Exchange, Queue
from kombu import BrokerConnection

from kombu.mixins import ConsumerMixin

from kombu.utils import kwdict, reprcall
from kombu.utils.debug import setup_logging

import difflib
import logging

setup_logging(loglevel="INFO")
LOGGING_LEVELS = {'critical': logging.CRITICAL,
                  'error': logging.ERROR,
                  'warning': logging.WARNING,
                  'info': logging.INFO,
                  'debug': logging.DEBUG}

myname = os.uname()[1]

class Worker(ConsumerMixin):

    def __init__(self, connection, lockfile, iptables_file):
        self.connection = connection
        self.lockfile = lockfile
        self.iptables_file = iptables_file
        if os.path.isfile(self.lockfile):
            os.unlink(self.lockfile)

    def get_consumers(self, Consumer, channel):
        return [Consumer(queues=Queue(
            myname, Exchange(myname, type="direct"),
            routing_key=myname),
        callbacks=[self.process_task])]

    def process_task(self, body, message):
        logging.debug("TASK")
        a = datetime.now()
        self.iptables_save = []
        #self.info("Received payload %s" % json.dumps(body, sort_keys=True, indent=4))

        lock = FileLock(self.lockfile.replace('.lock',''))
        lock.acquire()
        self._gen_iptables_save_(body)
        self.iptables_save.append('COMMIT\n')
        old = open(self.iptables_file, 'r').readlines()
        open(self.iptables_file, 'w').write("\n".join(self.iptables_save))
        new = open(self.iptables_file, 'r').readlines()

        for line in difflib.unified_diff(old,new):
            logging.debug(line.rstrip())

        logging.info("Worke done")
        lock.release()
        message.ack()
        b = datetime.now()
        c = b - a

        logging.debug(c)

    def _add_rule(self, rule):
        if not len(self.iptables_save):
            self.iptables_save.append('*filter')

        if rule not in self.iptables_save:
            logging.debug(rule)
            self.iptables_save.append(rule)

    def _gen_jumps_(self, table, name, cidr, nextjump, datacenter=False):
        #print 'Table' + table
        #print 'Name' + name
        #print 'CIDR' + cidr
        #print 'Next' + nextjump
        try:
            if IPNetwork(nextjump).version == 6:
                netid = hashlib.md5()
                netid.update(nextjump)
                nextjump = netid.hexdigest()[:15]
            if IPNetwork(name).version == 6:
                netid = hashlib.md5()
                netid.update(name)
                name = netid.hexdigest()[:15]
        except ValueError:
            pass

        if table and name and cidr and nextjump:
            self._add_rule(":%s-%s - [0:0]" % (table, nextjump))
            jump = "-{action} {name} -{direction} {cidr} -j {table}-{nextjump}"
            directions = {
                'FORWARD': ['s', 'd'],
                'INPUT': ['d'],
                'OUTPUT': ['s']
            }

            name = table if datacenter else "%s-%s" % (table, name)
            for direction in directions[table]:
                self._add_rule(
                    jump.format(action='A',
                                table=table,
                                name=name,
                                direction=direction,
                                cidr=cidr,
                                nextjump=nextjump
                    )
                )

    def _gen_rule_(self, rule):
        iptables = []
        try:
            if IPNetwork(rule['owner']).version == 6:
                netid = hashlib.md5()
                netid.update(rule['owner'])
                rule['owner'] = netid.hexdigest()[:15]
        except ValueError:
            pass

        if ('table' in rule) and ('owner' in rule):
            iptables.append('-I {table}-{owner}'.format(table=rule['table'], owner=rule['owner']))
            field_maps = {
                'src': '-s',
                'dst': '-d',
                'src_port': '--sport',
                'dst_port': '--dport',
                'proto': '-p',
                'id': '-m comment --comment'
            }

            for field, value in field_maps.iteritems():
                if rule[field]:
                    iptables.append(' %s %s' % (value, rule[field]))

            iptables.append(' -j {policy}'.format(policy=rule['policy']))
        return "".join(iptables)

    def _gen_iptables_save_(self, data):
        logging.debug(json.dumps(data, sort_keys=True, indent=4))
        def rule_dzvs_block(infos):
            self._gen_jumps_(infos['table'], infos['datacenter'], infos['cidr'], infos['datacenter'], datacenter=True)
            self._gen_jumps_(infos['table'], infos['datacenter'], infos['cidr'], infos['zone'])
            self._gen_jumps_(infos['table'], infos['zone'], infos['cidr'], infos['vlan'])
            self._gen_jumps_(infos['table'], infos['vlan'], infos['cidr'], infos['cidr'])

        for rule in [ rule for rule in data.get('policy') if 'table' in rule ]:
            if ('datacenter' in data) and ('zones' in data):
                logging.debug('DC chain')
                for zone in data['zones']:
                    for vlan in zone['vlans']:
                        for subnet in vlan['subnets']:
                            if IPNetwork(subnet).version == 4:
                                infos = {'table': rule['table'],
                                         'datacenter': data['datacenter'],
                                         'cidr': subnet['cidr'],
                                         'zone': zone['zone'],
                                         'vlan': vlan['vlan']}
                            rule_dzvs_block(infos)

            if ('zone' in data) and ('vlans' in data):
                logging.debug('Zone chain')
                for vlan in data['vlans']:
                    for subnet in vlan['subnets']:
                        infos = {'table': rule['table'],
                                 'datacenter': data['datacenter'],
                                 'cidr': subnet['cidr'],
                                 'zone': data['zone'],
                                 'vlan': vlan['vlan']}
                        rule_dzvs_block(infos)

            if ('vlan' in data) and ('subnets' in data):
                logging.debug('VLAN chain')
                for subnet in data['subnets']:
                    infos = {'table': rule['table'],
                             'datacenter': data['datacenter'],
                             'cidr': subnet['cidr'],
                             'zone': data['zone'],
                             'vlan': data['vlan']}
                    rule_dzvs_block(infos)

            if ('subnet' in data) and ('ips' in data):
                logging.debug('Subnet chain')
                infos = {'table': rule['table'],
                         'datacenter': data['datacenter'],
                         'cidr': data['subnet'],
                         'zone': data['zone'],
                         'vlan': data['vlan']}
                rule_dzvs_block(infos)
                [self._gen_jumps_(rule['table'], data['subnet'], ip['ip'], ip['ip']) for ip in data['ips']]

            if ('anycast' in data) and ('ipsanycast' in data) :
                logging.debug('Anycast chain')
                infos = {'table': rule['table'],
                         'datacenter': data['datacenter'],
                         'cidr': data['anycast'],
                         'zone': data['zone'],
                         'vlan': 'anycast'}
                rule_dzvs_block(infos)
                [self._gen_jumps_(rule['table'], data['anycast'], ip['ip'], ip['ip']) for ip in data['ipsanycast']]

            if 'ip' in data:
                logging.debug('IP Chain')
                #print json.dumps(data, sort_keys=True, indent=4)
                infos = {'table': rule['table'],
                         'datacenter': data['datacenter'],
                         'cidr': data['subnet'],
                         'zone': data['zone'],
                         'vlan': data['vlan']}
                rule_dzvs_block(infos)
                self._gen_jumps_(rule['table'], data['subnet'], data['ip'], data['ip'])

            self._add_rule(self._gen_rule_(rule))

            if 'ipanycast' in data:
                logging.debug('IP Chain')
                #print json.dumps(data, sort_keys=True, indent=4)
                infos = {'table': rule['table'],
                         'datacenter': data['datacenter'],
                         'cidr': data['anycast'],
                         'zone': data['zone'],
                         'vlan': 'anycast'}
                rule_dzvs_block(infos)
                self._gen_jumps_(rule['table'], data['anycast'], data['ipanycast'], data['anycast'])

            self._add_rule(self._gen_rule_(rule))

def help():
    print '%s::' % sys.argv[0]
    print '   -a action <stop|start|status|foreground>'
    print '   -u user <simplenet>'
    print '   -c config </etc/simplenet/agents.conf>'

def main(user, config_file):
    config = ConfigParser.ConfigParser()
    config.read(config_file)

    if config.has_option('firewall','hostname'):
        global myname
        myname = config.get('firewall','hostname')

    logging.basicConfig(level=LOGGING_LEVELS.get(config.get('firewall','logging')), filename='/var/log/simplenet.log')

    with BrokerConnection(config.get('firewall','uri')) as conn:
        Worker(conn, config.get('firewall','lockfile'), config.get('firewall','iptables_file')).run()

if __name__ == '__main__':
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'a:u:c:', ['action=', 'user=', 'config='])
    except getopt.GetoptError, err:
        help()

    user = 'simplenet'
    action = 'start'
    config = '/etc/simplenet/agents.cfg'
    for o, a in opts:
        if o in ('-a', '--action'):
            action = a
        elif o in ('-u', '--user'):
            user = a
        elif o in ('-c', '--config'):
            config = a
        else:
            help()

    daemon = Daemon(name='simplenet', catch_all_log='/var/log/simplenet.log')
    if action == 'start':
        daemon.start()
        main(user, config)
    elif action == 'status':
        daemon.status()
    elif action == 'stop':
        daemon.stop()
    elif action == 'foreground':
        main(user, config)

