#!/usr/bin/python

# Copyright 2012 Locaweb.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez (ncode), Locaweb.
# @author: Luiz Ozaki, Locaweb.

import os
import sys
import json
import baker
import requests
import ConfigParser
from locautils import cas
from getpass import getpass

config_file = '/etc/simplenet/simplenet-cli.cfg'

config = ConfigParser.ConfigParser()
config.read(config_file)

server              = config.get("server", "api_endpoint")
CAS_ENDPOINT        = config.get("authentication", "cas_endpoint")
CAS_SERVICE         = config.get("authentication", "cas_service")
__cas_username    = ""
__cas_passwd      = ""

def __authpair_prompt():
    global __cas_username, __cas_passwd
    if not __cas_username:
        __cas_username = raw_input("Type your CAS username: ").strip()
    if not __cas_passwd:
        __cas_passwd = getpass("Type your CAS password: ")
    print ""

def __gen_authtk():
    try:
        f = open(os.path.expanduser("~/.simplecli"), "r")
    except:
        __authpair_prompt()
        try:
            cas_cli = cas.CASClient(server=CAS_ENDPOINT, username=__cas_username, password=__cas_passwd)
            cas_tk  = cas_cli.generate_ticket(service=CAS_SERVICE)
        except cas.CasTGTError:
            return
        f = open(os.path.expanduser("~/.simplecli"), "w+")
        f.write(cas_tk)
        return cas_tk
    return f.read()

def __api_call(method, url, data=None):
    if (method == 'get'):
        # ret = requests.get(url + "?ticket=" + __gen_authtk())
        ret = requests.get(url)
    elif (method == 'post'):
        # ret = requests.post(url + "?ticket=" + __gen_authtk(), data=data)
        ret = requests.post(url, data=data)
    elif (method == 'delete'):
        # ret = requests.delete(url + "?ticket=" + __gen_authtk())
        ret = requests.delete(url)

    #if ret.status_code == 403:
    #    os.remove(os.path.expanduser("~/.simplecli"))
    #    sys.exit(1)

    return ret

def fetch_id(_type, _data):
    if (_type == 'subnets') or (_type == 'anycasts'):
        data = __api_call("get", '%s/%s/by-cidr/%s' %
            (server, _type, _data.replace('/','_'))
        )
    elif _type in ('ips', 'ipanycasts'):
        data = __api_call("get", '%s/%s/by-ip/%s' % (server, _type, _data))
    else:
        data = __api_call("get", '%s/%s/by-name/%s' % (server, _type, _data))

    try:
        return json.loads(data.text)['id']
    except:
        print 'Invalid input name, cidr or ip'
        sys.exit(1)

def pretty_output(r):
    data = r.text
    try:
        print json.dumps(json.loads(data), sort_keys=True, indent=4)
    except ValueError:
        print data

    if (r.status_code != 200):
        sys.exit(1)
    sys.exit(0)

@baker.command(
    params={ 'action': '<list all|info|create|delete>',
             'name': 'datacenter name'}
)
def datacenter(action=None, name=None):
    base_url = '%s/datacenters' % (server)
    r = None
    if action == 'list':
        r = __api_call("get", '%s/list' % base_url)
    elif action == 'create':
        r = __api_call("post", base_url, data=json.dumps({'name': name}))
    elif action == 'delete':
        r = __api_call("delete", '%s/%s/delete' %
            (base_url, fetch_id('datacenters', name))
        )
    elif action == 'info':
        r = __api_call("get", '%s/by-name/%s' % (base_url, name))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)

@baker.command(
    params={ 'action': '<list all|info|create|delete>',
             'name': 'zone name'}
)
def zone(action=None, name=None, datacenter=None):
    base_url = '%s/zones' % (server)
    r = None
    if action == 'list':
        r = __api_call("get", '%s/list' % base_url)
    elif action == 'create':
        if not datacenter:
            print 'Missing datacenter_id to create'
            sys.exit(1)

        datacenter_id = fetch_id('datacenters', datacenter)
        r = __api_call("post", '%s/datacenters/%s/zones' % (server, datacenter_id),
            data=json.dumps({'name': name, 'datacenter_id': datacenter_id})
        )
    elif action == 'delete':
        r = __api_call("delete", '%s/%s/delete' %
            (base_url, fetch_id('zones', name))
        )
    elif action == 'info':
        r = __api_call("get", '%s/by-name/%s' % (base_url, name))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={ 'action': '<list all|create|delete|device_list>',
             'name': 'vlan name',
             'zone': 'zone_id to create a new vlan'}
)
def vlan(action=None, name=None, zone=None):
    base_url = '%s/vlans' % (server)
    r = None
    if action == 'list':
        r = __api_call("get", '%s/list' % base_url)
    elif action == 'create':
        if not zone:
            print 'Missing zone to create'
            sys.exit(1)

        zone_id = fetch_id('zones', zone)
        r = __api_call("post", '%s/zones/%s/vlans' % (server, zone_id),
            data=json.dumps({'name': name})
        )
    elif action == 'delete':
        r = __api_call("delete", '%s/%s/delete' %
            (base_url, fetch_id('vlans', name))
        )
    elif action == 'info':
        r = __api_call("get", '%s/by-name/%s' % (base_url, name))
    elif action == 'device_list':
        r = __api_call("get", '%s/devices/list-by-vlan/%s' % (server, fetch_id('vlans', name)))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)

@baker.command(
    params={ 'action': '<list all|create|delete|rename>',
             'cidr': 'subnet cidr',
             'vlan': 'vlan to create a new subnet' }
)
def subnet(action=None, cidr=None, vlan=None):
    base_url = '%s/subnets' % (server)
    r = None
    if action == 'list':
        r = __api_call("get", '%s/list' %  base_url)
    elif action == 'create':
        if not vlan:
            print 'Missing vlan to create'
            sys.exit(1)

        vlan_id = fetch_id('vlans', vlan)
        r = __api_call("post", '%s/vlans/%s/subnets' % (server, vlan_id),
             data=json.dumps({'cidr': cidr})
        )
    elif action == 'delete':
        r = __api_call("delete", '%s/%s/delete' %
            (base_url, fetch_id('subnets', cidr))
        )
    elif action == 'info':
        r = __api_call("get", '%s/by-cidr/%s' %
            (base_url, cidr.replace('/', '_'))
        )
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={ 'action': '<list all|create|delete|rename>',
             'cidr': 'subnet cidr',}
)
def anycast(action=None, cidr=None):
    base_url = '%s/anycasts' % (server)
    r = None
    if action == 'list':
        r = __api_call("get", '%s/list' %  base_url)
    elif action == 'create':
        r = __api_call("post", '%s/anycasts' % (server),
             data=json.dumps({'cidr': cidr})
        )
    elif action == 'delete':
        r = __api_call("delete", '%s/%s/delete' %
            (base_url, fetch_id('anycasts', cidr))
        )
    elif action == 'info':
        r = __api_call("get", '%s/by-cidr/%s' %
            (base_url, cidr.replace('/', '_'))
        )
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={ 'action': '<list all|create|delete|rename>',
             'ip': 'ip address',
             'subnet': 'subnet cidr' }
)
def ip(action=None, ip=None, subnet=None):
    base_url = '%s/ips' % (server)
    r = None
    if action == 'list':
        r = __api_call("get", '%s/list' %  base_url)
    elif action == 'create':
        if not subnet:
            print 'Missing subnet to create'
            sys.exit(1)

        r = __api_call("post", '%s/subnets/%s/ips' % (server, fetch_id('subnets', subnet)),
            data=json.dumps({'ip': ip})
        )
    elif action == 'delete':
        r = __api_call("delete", '%s/%s/delete' %
            (base_url, fetch_id('ips', ip))
        )
    elif action == 'info':
        r = __api_call("get", '%s/by-ip/%s' % (base_url, ip))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)

@baker.command(
    params={ 'action': '<list all|create|delete|rename>',
             'ip': 'ip address',
             'anycast': 'anycast cidr' }
)
def ipanycast(action=None, ip=None, anycast=None):
    base_url = '%s/ipanycasts' % (server)
    r = None
    if action == 'list':
        r = __api_call("get", '%s/list' %  base_url)
    elif action == 'create':
        if not anycast:
            print 'Missing anycast subnet to create'
            sys.exit(1)

        r = __api_call("post", '%s/anycasts/%s/ipsanycast' % (server, fetch_id('anycasts', anycast)),
            data=json.dumps({'ip': ip})
        )
    elif action == 'delete':
        r = __api_call("delete", '%s/%s/delete' %
            (base_url, fetch_id('ipanycasts', ip))
        )
    elif action == 'info':
        r = __api_call("get", '%s/by-ip/%s' % (base_url, ip))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)

@baker.command(
    params={ 'action': '<list all|create|delete|vlan_attach|vlan_create|vlan_list|anycast_attach>',
             'name': 'device name',
             'zone': 'zone to create a new device',
             'anycast': 'attach anycast to a device',
             'vlan': 'vlan to attach vlans to devices' }
)
def device(action=None, name=None, zone=None, vlan=None, anycast=None):
    base_url = '%s/devices' % (server)
    r = None
    if action == 'list':
        r = __api_call("get", '%s/list' % base_url)
    elif action == 'create':
        if not zone:
            print 'Missing zone to create'
            sys.exit(1)

        zone_id = fetch_id('zones', zone)
        r = __api_call("post", '%s/zones/%s/devices' %
            (server, zone_id), data=json.dumps({'name': name})
        )
    elif action == 'delete':
        r = __api_call("delete", '%s/%s/delete' % (
            base_url, fetch_id('devices', name))
        )
    elif action == 'info':
        r = __api_call("get", '%s/by-name/%s' % (base_url, name))
    elif action == 'vlan_attach':
        if not vlan:
            print 'Missing vlan to attach'
            sys.exit(1)

        vlan_id = fetch_id('vlans', vlan)
        r = __api_call("post", '%s/%s/vlans' %
            (base_url, fetch_id('devices', name)),
            data=json.dumps({'vlan_id': vlan_id})
        )
    elif action == 'anycast_attach':
        if not anycast:
            print 'Missing anycast to attach'
            sys.exit(1)

        anycast_id = fetch_id('anycasts', anycast)
        r = __api_call("post", '%s/%s/anycasts' %
            (base_url, fetch_id('devices', name)),
            data=json.dumps({'anycast_id': anycast_id})
        )
    elif action == 'vlan_detach':
        if not vlan:
            print 'Missing vlan to attach'
            sys.exit(1)

        r = __api_call("delete", '%s/%s/vlans/%s' % (
            base_url, fetch_id('devices', name), fetch_id('vlans', vlan))
        )
    elif action == 'vlan_list':
        r = __api_call("get", '%s/vlans/list-by-device/%s' %
            (server, fetch_id('devices', name))
        )
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)


@baker.command(
    params={ 'action': '<list all|attach|create|delete|rename>',
             'name': 'type of owner <zone|vlan|subnet|ip|anycast|ipanycast>',
             'owner': 'policy owner name',
             'src': 'source ip or subnet',
             'src_port': 'source port',
             'dst': 'destination ip or subnet',
             'dst_port': 'destination port',
             'proto': 'protocol name or number',
             'table': 'table to apply the policy <INPUT|FORWARD|OUTPUT>',
             'policy': 'policy to use <ACCEPT|REJECT|DROP>' }
)
def policy(action=None, name=None, owner=None, dst=None, src=None, dst_port=None,
           src_port=None, proto=None, table=None, policy=None):
    base_url = '%s/firewall/policy' % server
    r = None
    if action == 'list':
        if owner == 'all':
            r = __api_call("get", '%s/by-type/%s/list' % (base_url, name))
        else:
            r = __api_call("get", '%s/by-owner/%s/%s/list' % (base_url, name, fetch_id('%ss' % name, owner)))
    elif action == 'create':
        owner_id = fetch_id('%ss' % name, owner)
        if not table:
            print 'Missing table to create'
            sys.exit(1)
        elif not policy:
            print 'Missing policy to create'
            sys.exit(1)

        data = {}
        for key in ['policy', 'dst', 'src', 'dst_port',
                    'src_port', 'proto', 'table']:
            value = vars()[key]
            if key != None:
                data.update({key: value})
        print '%s/%s/%s' % (base_url, name, owner_id)
        r = __api_call("post", '%s/%s/%s' %
            (base_url, name, owner_id), data=json.dumps(data)
        )
    elif action == 'delete':
        r = __api_call("delete", '%s/%s/%s/delete' % (base_url, name, owner))
    elif action == 'info':
        r = __api_call("get", '%s/%s/%s/info' % (base_url, name, owner))
    else:
        baker.usage(sys._getframe().f_code.co_name)
        sys.exit(1)
    pretty_output(r)

if __name__ == "__main__":
    baker.run()
