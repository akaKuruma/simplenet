#!/usr/bin/python

# Copyright 2012 Locaweb.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez (ncode), Locaweb.

import os
import sys
import json
from kombu.mixins import ConsumerMixin
from kombu.utils import kwdict, reprcall
from kombu import Exchange, Queue

myname = os.uname()[1]

class Worker(ConsumerMixin):

    def __init__(self, connection):
        self.connection = connection

    def get_consumers(self, Consumer, channel):
        return [Consumer(queues=Queue(
            myname, Exchange(myname, type="direct"),
            routing_key=myname),
        callbacks=[self.process_task])]

    def process_task(self, body, message):
        print json.dumps(body, sort_keys=True, indent=4)
        self._gen_parents_(body)
#        message.ack()

    def _add_rule(self, rule, iptables_save):
        if not rule in iptables_save:
            iptables_save.add(rule)

    def _gen_jumps_(self, table, name, cidr, nextjump, iptables_save=[], datacenter=False):
        self._add_rule("-N %s-%s" % (table, nextjump), iptables_save)
        if 'FORWARD' in table:
            for direction in ['src', 'dst']:
                if not datacenter:
                    self._add_rule("-D %s-%s --%s %s -j %s-%s" % (table, name, direction, cidr, table, nextjump))
                    print "-A %s-%s --%s %s -j %s-%s" % (table, name, direction, cidr, table, nextjump)
                else:
                    print "-D %s --%s %s -j %s-%s" % (table, direction, cidr, table, nextjump)
                    print "-A %s --%s %s -j %s-%s" % (table, direction, cidr, table, nextjump)
        else:
            if not datacenter:
                print "-D %s-%s %s -j %s-%s" % (table, name, cidr, table, nextjump)
                print "-A %s-%s %s -j %s-%s" % (table, name, cidr, table, nextjump)
            else:
                print "-D %s %s -j %s-%s" % (table, cidr, table, nextjump)
                print "-A %s %s -j %s-%s" % (table, cidr, table, nextjump)

    def _gen_rule_(self, rule):
        iptables = []
        iptables.append('-I {table}-{owner}'.format(table=rule['table'], owner=rule['owner']))
        field_maps = {
            'src': '-s',
            'dst': '-d',
            'src_port': '--sport',
            'dst_port': '--dport',
            'proto': '-p',
            'id': '-m comment --comment'
        }

        for field, value in field_maps.iteritems():
            if rule[field]:
                iptables.append(' %s %s' % (value, rule[field]))

        iptables.append(' -j {policy}'.format(policy=rule['policy']))
        print "".join(iptables)

    def _gen_parents_(self, data):
        rule = data.get('policy')
        iptables_save = []
        if ('datacenter' in data) and ('zones' in data):
            for zone in data['zones']:
                for vlan in zone['vlans']:
                    for subnet in vlan['subnets']:
                        self._gen_jumps_(rule['table'], data['datacenter'], subnet['cidr'], data['datacenter'], datacenter=True)
                        self._gen_jumps_(rule['table'], data['datacenter'], subnet['cidr'], zone['zone'])
                        self._gen_jumps_(rule['table'], zone['zone'], subnet['cidr'], vlan['vlan'])
                        self._gen_jumps_(rule['table'], vlan['vlan'], subnet['cidr'], subnet['cidr'])

        if ('zone' in data) and ('vlans' in data):
            for vlan in data['vlans']:
                for subnet in vlan['subnets']:
                    self._gen_jumps_(rule['table'], data['datacenter'], subnet['cidr'], data['datacenter'], datacenter=True)
                    self._gen_jumps_(rule['table'], data['datacenter'], subnet['cidr'], data['zone'])
                    self._gen_jumps_(rule['table'], data['zone'], subnet['cidr'], vlan['vlan'])
                    self._gen_jumps_(rule['table'], vlan['vlan'], subnet['cidr'], subnet['cidr'])

        if ('vlan' in data) and ('subnets' in data):
            for subnet in data['subnets']:
                self._gen_jumps_(rule['table'], data['datacenter'], subnet['cidr'], data['datacenter'], datacenter=True)
                self._gen_jumps_(rule['table'], data['datacenter'], subnet['cidr'], data['zone'])
                self._gen_jumps_(rule['table'], data['zone'], subnet['cidr'], data['vlan'])
                self._gen_jumps_(rule['table'], data['vlan'], subnet['cidr'], subnet['cidr'])

        if ('subnet' in data) and ('ips' in data) :
            self._gen_jumps_(rule['table'], data['datacenter'], data['subnet'], data['datacenter'], datacenter=True)
            self._gen_jumps_(rule['table'], data['datacenter'], data['subnet'], data['zone'])
            self._gen_jumps_(rule['table'], data['zone'], data['subnet'], data['vlan'])
            self._gen_jumps_(rule['table'], data['vlan'], data['subnet'], data['subnet'])
            [self._gen_jumps_(rule['table'], data['subnet'], ip['ip'], ip['ip']) for ip in data['ips']]

        if 'ip' in data:
            self._gen_jumps_(rule['table'], data['datacenter'], data['subnet'], data['datacenter'], datacenter=True)
            self._gen_jumps_(rule['table'], data['datacenter'], data['subnet'], data['zone'])
            self._gen_jumps_(rule['table'], data['zone'], data['subnet'], data['vlan'])
            self._gen_jumps_(rule['table'], data['vlan'], data['subnet'], data['subnet'])
            self._gen_jumps_(rule['table'], data['subnet'], data['ip'], data['ip'])

        self._gen_rule_(rule)

#        message.ack()

if __name__ == "__main__":
    from kombu import BrokerConnection
    from kombu.utils.debug import setup_logging
    setup_logging(loglevel="DEBUG")

    with BrokerConnection("amqp://guest:guest@localhost:5672//") as conn:
        try:
            Worker(conn).run()
        except KeyboardInterrupt:
            print("bye bye")

