#!/usr/bin/python

# Copyright 2012 Locaweb.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez (ncode), Locaweb.

import os
import sys
import json
import fcntl

from lockfile import FileLock, LockTimeout

from kombu import Exchange, Queue
from kombu import BrokerConnection

from kombu.mixins import ConsumerMixin

from kombu.utils import kwdict, reprcall
from kombu.utils.debug import setup_logging

setup_logging(loglevel="INFO")

myname = os.uname()[1]

class Worker(ConsumerMixin):

    def __init__(self, connection):
        self.connection = connection

    def get_consumers(self, Consumer, channel):
        return [Consumer(queues=Queue(
            myname, Exchange(myname, type="direct"),
            routing_key=myname),
        callbacks=[self.process_task])]

    def process_task(self, body, message):
        self.iptables_save = []
        self.info("Received payload %s" % json.dumps(body, sort_keys=True, indent=4))

        lock = FileLock('/var/run/firewall-agent')
        lock.acquire()
        #print json.dumps(body, sort_keys=True, indent=4)
        self._gen_iptables_save_(body)
        self.iptables_save.append('COMMIT')
        open('/tmp/meh', 'w').write("\n".join(self.iptables_save))
        #print "\n".join(self.iptables_save)
        self.info("Woke done")
        lock.release()
        message.ack()

    def _add_rule(self, rule):
        if not len(self.iptables_save):
            self.iptables_save.append('*filter')

        if rule not in self.iptables_save:
            self.iptables_save.append(rule)

    def _gen_jumps_(self, table, name, cidr, nextjump, datacenter=False):
        self._add_rule(":%s-%s - [0:0]" % (table, nextjump))
        jump = "-{action} {name} -{direction} {cidr} -j {table}-{nextjump}"
        directions = {
            'FORWARD': ['s', 'd'],
            'INPUT': ['d'],
            'OUTPUT': ['s']
        }

        name = table if datacenter else "%s-%s" % (table, name)
        for direction in directions[table]:
            self._add_rule(
                jump.format(action='A',
                            table=table,
                            name=name,
                            direction=direction,
                            cidr=cidr,
                            nextjump=nextjump
                )
            )

    def _gen_rule_(self, rule):
        iptables = []
        if ('table' in rule) and ('owner' in rule):
            iptables.append('-I {table}-{owner}'.format(table=rule['table'], owner=rule['owner']))
            field_maps = {
                'src': '-s',
                'dst': '-d',
                'src_port': '--sport',
                'dst_port': '--dport',
                'proto': '-p',
                'id': '-m comment --comment'
            }

            for field, value in field_maps.iteritems():
                if rule[field]:
                    iptables.append(' %s %s' % (value, rule[field]))

            iptables.append(' -j {policy}'.format(policy=rule['policy']))
        return "".join(iptables)

    def _gen_iptables_save_(self, data):
        def rule_dzvs_block(infos):
            self._gen_jumps_(infos['table'], infos['datacenter'], infos['cidr'], infos['datacenter'], datacenter=True)
            self._gen_jumps_(infos['table'], infos['datacenter'], infos['cidr'], infos['zone'])
            self._gen_jumps_(infos['table'], infos['zone'], infos['cidr'], infos['vlan'])
            self._gen_jumps_(infos['table'], infos['vlan'], infos['cidr'], infos['cidr'])

        for rule in [ rule for rule in data.get('policy') if 'table' in rule ]:
            if ('datacenter' in data) and ('zones' in data):
                for zone in data['zones']:
                    for vlan in zone['vlans']:
                        for subnet in vlan['subnets']:
                            infos = {'table': rule['table'],
                                     'datacenter': data['datacenter'],
                                     'cidr': subnet['cidr'],
                                     'zone': zone['zone'],
                                     'vlan': vlan['vlan']}
                            rule_dzvs_block(infos)

            if ('zone' in data) and ('vlans' in data):
                for vlan in data['vlans']:
                    for subnet in vlan['subnets']:
                        infos = {'table': rule['table'],
                                 'datacenter': data['datacenter'],
                                 'cidr': subnet['cidr'],
                                 'zone': data['zone'],
                                 'vlan': vlan['vlan']}
                        rule_dzvs_block(infos)

            if ('vlan' in data) and ('subnets' in data):
                for subnet in data['subnets']:
                    infos = {'table': rule['table'],
                             'datacenter': data['datacenter'],
                             'cidr': subnet['cidr'],
                             'zone': data['zone'],
                             'vlan': data['vlan']}
                    rule_dzvs_block(infos)

            if ('subnet' in data) and ('ips' in data) :
                infos = {'table': rule['table'],
                         'datacenter': data['datacenter'],
                         'cidr': data['subnet'],
                         'zone': data['zone'],
                         'vlan': data['vlan']}
                rule_dzvs_block(infos)
                [self._gen_jumps_(rule['table'], data['subnet'], ip['ip'], ip['ip']) for ip in data['ips']]

            if 'ip' in data:
                infos = {'table': rule['table'],
                         'datacenter': data['datacenter'],
                         'cidr': data['subnet'],
                         'zone': data['zone'],
                         'vlan': data['vlan']}
                rule_dzvs_block(infos)
                self._gen_jumps_(rule['table'], data['subnet'], data['ip'], data['ip'])

            self._add_rule(self._gen_rule_(rule))

if __name__ == "__main__":
    with BrokerConnection("amqp://guest:guest@localhost:5672//") as conn:
        try:
            Worker(conn).run()
        except KeyboardInterrupt:
            print("bye bye")

