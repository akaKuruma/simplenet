#!/usr/bin/python

# Copyright 2012 Locaweb.
# All Rights Reserved.
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#        http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
# @author: Juliano Martinez (ncode), Locaweb.

import os
import sys
import json
import baker
import requests
import ConfigParser

config_file = ('/etc/simplenet/simplenet.cfg' if not 'SIMPLENET_CFG'
                in os.environ else os.environ['SIMPLENET_CFG'])

config = ConfigParser.ConfigParser()
config.read(config_file)

server = 'http://127.0.0.1:8081'

def fetch_id(_type, _data):
    if (_data):
        if (_data.find("/") != -1):
            data = requests.get("%s/%s/by-cidr/%s" % (server, _type, _data.replace("/","_")))
        elif (_data.find(".") != -1):
            data = requests.get("%s/%s/by-ip/%s" % (server, _type, _data))
        elif (len(_data) == 36):
            return _data
        else:
            data = requests.get("%s/%s/by-name/%s" % (server, _type, _data))

        try:
            return json.loads(data.text)['id']
        except:
            #print data
            return None
    else:
        return None

def pretty_output(r):
    data = r.text
    try:
        print json.dumps(json.loads(data), sort_keys=True, indent=4)
    except ValueError:
        print data

    if (r.status_code != 200):
        sys.exit(1)
    sys.exit(0)

@baker.command(
    params={ "action": "<list all|create|delete|rename>",
             "name": "datacenter name"}
)
def datacenter(action, name):
    base_url = '%s/datacenters' % (server)
    action_list = { 'list':  "%s/list" % base_url,
                    'create': base_url,
                    'delete': '%s/%s/delete' % (base_url, fetch_id("datacenters",name)),
                    'info': '%s/by-name/%s' % (base_url, name) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        r = requests.post(url, data=json.dumps({'name': name}))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    pretty_output(r)

@baker.command(
    params={ "action": "<list all|create|delete|rename>",
             "name": "zone name"}
)
def zone(action, name, datacenter=None):
    base_url = '%s/zones' % (server)
    action_list = { 'list':  "%s/list" % base_url,
                    'create': '%s/datacenters/%s/zones' % (
                        server, fetch_id("datacenters", datacenter)
                    ),
                    'delete': '%s/%s/delete' % (base_url, fetch_id("zones",name)),
                    'info': '%s/by-name/%s' % (base_url, name) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        if not fetch_id("datacenters", datacenter):
            print "Missing datacenter_id to create"
            sys.exit(1)
        r = requests.post(url, data=json.dumps({'name': name, 'datacenter_id': fetch_id("datacenters", datacenter)}))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    pretty_output(r)


@baker.command(
    params={ "action": "<list all|create|delete|rename>",
             "name": "vlan name",
             "zone": "zone_id to create a new vlan"}
)
def vlan(action, name, zone=None):
    base_url = '%s/vlans' % (server)
    action_list = { 'list': "%s/list" %  base_url,
                    'create': '%s/zones/%s/vlans' % (
                        server, fetch_id("zones", zone)
                    ),
                    'delete': '%s/%s/delete' % (base_url, fetch_id("vlans", name)),
                    'info': '%s/by-name/%s' % (base_url, name) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        if not fetch_id("zones", zone):
            print "Missing zone_id to create"
            sys.exit(1)
        r = requests.post(url, data=json.dumps({'name': name}))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    pretty_output(r)

@baker.command(
    params={ "action": "<list all|create|delete|rename>",
             "cidr": "subnet cidr",
             "vlan": "vlan to create a new subnet" }
)
def subnet(action, cidr, vlan=None):
    base_url = '%s/subnets' % (server)
    action_list = { 'list': "%s/list" %  base_url,
                    'create': '%s/vlans/%s/subnets' % (
                        server, fetch_id("vlans", vlan)
                    ),
                    'delete': '%s/%s/delete' % (base_url, fetch_id("subnets", cidr)),
                    'info': '%s/by-cidr/%s' % (base_url, cidr.replace('/', '_')) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        if not fetch_id("vlans", vlan):
            print "Missing vlan_id to create"
            sys.exit(1)
        r = requests.post(url, data=json.dumps({'cidr': cidr}))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    pretty_output(r)


@baker.command(
    params={ "action": "<list all|create|delete|rename>",
             "ip": "ip address",
             "subnet": "subnet to create a new vlan" }
)
def ip(action, ip, subnet=None):
    base_url = '%s/ips' % (server)
    action_list = { 'list': "%s/list" %  base_url,
                    'create': '%s/subnets/%s/ips' % (
                        server, fetch_id("subnets", subnet)
                    ),
                    'delete': '%s/%s/delete' % (base_url, fetch_id("ips", ip)),
                    'info': '%s/by-ip/%s' % (base_url, ip) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        if not fetch_id("subnets", subnet):
            print "Missing subnet_id to create"
            sys.exit(1)
        r = requests.post(url, data=json.dumps({'ip': ip}))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    pretty_output(r)

@baker.command(
    params={ "action": "<list all|attach|create|delete|rename>",
             "name": "device name",
             "zone": "zone to create a new device",
             "vlan": "vlan to attach vlans to devices" }
)
def device(action, name, zone=None, vlan=None):
    base_url = '%s/devices' % (server)
    action_list = { 'list': "%s/list" % base_url,
                    'create': '%s/zones/%s/devices' % (
                        server, fetch_id("zones", zone)
                    ),
                    'delete': '%s/%s/delete' % (base_url, fetch_id("devices", name)),
                    'attach': '%s/%s/vlans' % (base_url, fetch_id("devices", name)),
                    'detach': '%s/%s/vlans/%s' % (base_url, fetch_id("devices", name), fetch_id("vlans", vlan)),
                    'info': '%s/by-name/%s' % (base_url, name) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        if not fetch_id("zones", zone):
            print "Missing zone_id to create"
            sys.exit(1)
        r = requests.post(url, data=json.dumps({'name': name}))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    elif action == 'attach':
        if not fetch_id("vlans", vlan):
            print "Missing vlan_id to create"
            sys.exit(1)
        r = requests.post(url, data=json.dumps({'vlan_id': fetch_id("vlans", vlan)}))
    elif action == 'detach':
        r = requests.delete(url)
    pretty_output(r)


@baker.command(
    params={ "action": "<list all|attach|create|delete|rename>",
             "owner_type": "type of ownder <zone|vlan|subnet|ip>",
             "name": "policy name",
             "owner": "policy owner",
             "src": "source ip or subnet",
             "src_port": "source port",
             "dst": "destination ip or subnet",
             "dst_port": "destination port",
             "proto": "protocol name or number",
             "table": "table to apply the policy <INPUT|FORWARD|OUTPUT>",
             "policy": "policy to use <ACCEPT|REJECT|DROP>" }
)
def policy(action, name, owner, dst=None, src=None, dst_port=None,
           src_port=None, proto=None, table=None, policy=None):
    base_url = '%s/firewall/policy' % server
    action_list = { 'list': "%s/%s/list" % (base_url, name),
                    'create': '%s/%s/%s' % (
                        base_url, name, fetch_id(name + "s", owner)
                    ),
                    'delete': '%s/%s/%s/delete' % (base_url, name, fetch_id(name + "s", owner)),
                    'info': '%s/%s/%s/info' % (base_url, name, fetch_id(name + "s", owner)) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        if not table:
            print "Missing table to create"
            sys.exit(1)
        elif not policy:
            print "Missing policy to create"
            sys.exit(1)
        data = {}
        for key in ['policy', 'dst', 'src', 'dst_port',
                    'src_port', 'proto', 'table']:
            value = vars()[key]
            if key != None:
                data.update({key: value})
        print url
        r = requests.post(url, data=json.dumps(data))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    pretty_output(r)

baker.run()
