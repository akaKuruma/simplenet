#!/usr/bin/python

import os
import json
import baker
import requests
import ConfigParser

config_file = ('/etc/simplenet/simplenet.cfg' if not 'SIMPLENET_CFG'
                in os.environ else os.environ['SIMPLENET_CFG'])

config = ConfigParser.ConfigParser()
config.read(config_file)

server = 'http://127.0.0.1:8081'

@baker.command(
    params={ "action": "<list all|create|delete|rename>",
             "name": "neighborhood name"}
)
def neighborhood(action, name):
    base_url = '%s/neighborhoods' % (server)
    action_list = { 'list':  base_url,
                    'create': base_url,
                    'delete': '%s/%s' % (base_url, name),
                    'info': '%s/by-name/%s' % (base_url, name) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        r = requests.post(url, data=json.dumps({'name': name}))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    print r.json if hasattr(r, 'json') else r.text

@baker.command(
    params={ "action": "<list all|create|delete|rename>",
             "name": "vlan name"}
)
def vlan(action, name, neighborhood_id=None):
    base_url = '%s/vlans' % (server)
    action_list = { 'list':  base_url,
                    'create': '%s/neighborhoods/%s/vlans' % (
                        server, neighborhood_id
                    ),
                    'delete': '%s/%s' % (base_url, name),
                    'info': '%s/by-name/%s' % (base_url, name) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        r = requests.post(url, data=json.dumps({'name': name}))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    print r.json if hasattr(r, 'json') else r.text


@baker.command(
    params={ "action": "<list all|create|delete|rename>",
             "cidr": "subnet cidr"}
)
def subnet(action, cidr, vlan_id=None):
    base_url = '%s/subnets' % (server)
    action_list = { 'list':  base_url,
                    'create': '%s/vlans/%s/subnets' % (
                        server, vlan_id
                    ),
                    'delete': '%s/%s' % (base_url, cidr),
                    'info': '%s/by-cidr/%s' % (base_url, cidr) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        r = requests.post(url, data=json.dumps({'cidr': cidr}))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    print r.json if hasattr(r, 'json') else r.text

@baker.command(
    params={ "action": "<list all|create|delete|rename>",
             "ip": "ip ip"}
)
def ip(action, ip, vlan_id=None):
    base_url = '%s/ips' % (server)
    action_list = { 'list':  base_url,
                    'create': '%s/vlans/%s/ips' % (
                        server, vlan_id
                    ),
                    'delete': '%s/%s' % (base_url, ip),
                    'info': '%s/by-ip/%s' % (base_url, ip) }

    url = action_list[action]
    r = None
    if action == 'list':
        r = requests.get(url)
    elif action == 'create':
        r = requests.post(url, data=json.dumps({'ip': ip}))
    elif action == 'delete':
        r = requests.delete(url)
    elif action == 'info':
        r = requests.get(url)
    print r.json if hasattr(r, 'json') else r.text

baker.run()
